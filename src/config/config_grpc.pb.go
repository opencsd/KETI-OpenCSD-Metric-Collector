// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: config/config.proto

package test2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SEMetricClient is the client API for SEMetric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SEMetricClient interface {
	ReceiveSEMetric(ctx context.Context, in *SEMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type sEMetricClient struct {
	cc grpc.ClientConnInterface
}

func NewSEMetricClient(cc grpc.ClientConnInterface) SEMetricClient {
	return &sEMetricClient{cc}
}

func (c *sEMetricClient) ReceiveSEMetric(ctx context.Context, in *SEMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/config.SEMetric/receiveSEMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SEMetricServer is the server API for SEMetric service.
// All implementations must embed UnimplementedSEMetricServer
// for forward compatibility
type SEMetricServer interface {
	ReceiveSEMetric(context.Context, *SEMetricRequest) (*MetricResponse, error)
	mustEmbedUnimplementedSEMetricServer()
}

// UnimplementedSEMetricServer must be embedded to have forward compatible implementations.
type UnimplementedSEMetricServer struct {
}

func (UnimplementedSEMetricServer) ReceiveSEMetric(context.Context, *SEMetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveSEMetric not implemented")
}
func (UnimplementedSEMetricServer) mustEmbedUnimplementedSEMetricServer() {}

// UnsafeSEMetricServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SEMetricServer will
// result in compilation errors.
type UnsafeSEMetricServer interface {
	mustEmbedUnimplementedSEMetricServer()
}

func RegisterSEMetricServer(s grpc.ServiceRegistrar, srv SEMetricServer) {
	s.RegisterService(&SEMetric_ServiceDesc, srv)
}

func _SEMetric_ReceiveSEMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SEMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEMetricServer).ReceiveSEMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SEMetric/receiveSEMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEMetricServer).ReceiveSEMetric(ctx, req.(*SEMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SEMetric_ServiceDesc is the grpc.ServiceDesc for SEMetric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SEMetric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.SEMetric",
	HandlerType: (*SEMetricServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "receiveSEMetric",
			Handler:    _SEMetric_ReceiveSEMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/config.proto",
}

// SSDMetricClient is the client API for SSDMetric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSDMetricClient interface {
	ReceiveSSDMetric(ctx context.Context, in *SSDMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type sSDMetricClient struct {
	cc grpc.ClientConnInterface
}

func NewSSDMetricClient(cc grpc.ClientConnInterface) SSDMetricClient {
	return &sSDMetricClient{cc}
}

func (c *sSDMetricClient) ReceiveSSDMetric(ctx context.Context, in *SSDMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/config.SSDMetric/receiveSSDMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSDMetricServer is the server API for SSDMetric service.
// All implementations must embed UnimplementedSSDMetricServer
// for forward compatibility
type SSDMetricServer interface {
	ReceiveSSDMetric(context.Context, *SSDMetricRequest) (*MetricResponse, error)
	mustEmbedUnimplementedSSDMetricServer()
}

// UnimplementedSSDMetricServer must be embedded to have forward compatible implementations.
type UnimplementedSSDMetricServer struct {
}

func (UnimplementedSSDMetricServer) ReceiveSSDMetric(context.Context, *SSDMetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveSSDMetric not implemented")
}
func (UnimplementedSSDMetricServer) mustEmbedUnimplementedSSDMetricServer() {}

// UnsafeSSDMetricServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSDMetricServer will
// result in compilation errors.
type UnsafeSSDMetricServer interface {
	mustEmbedUnimplementedSSDMetricServer()
}

func RegisterSSDMetricServer(s grpc.ServiceRegistrar, srv SSDMetricServer) {
	s.RegisterService(&SSDMetric_ServiceDesc, srv)
}

func _SSDMetric_ReceiveSSDMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSDMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSDMetricServer).ReceiveSSDMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SSDMetric/receiveSSDMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSDMetricServer).ReceiveSSDMetric(ctx, req.(*SSDMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSDMetric_ServiceDesc is the grpc.ServiceDesc for SSDMetric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSDMetric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.SSDMetric",
	HandlerType: (*SSDMetricServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "receiveSSDMetric",
			Handler:    _SSDMetric_ReceiveSSDMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/config.proto",
}

// CSDMetricClient is the client API for CSDMetric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSDMetricClient interface {
	ReceiveCSDMetric(ctx context.Context, in *CSDMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type cSDMetricClient struct {
	cc grpc.ClientConnInterface
}

func NewCSDMetricClient(cc grpc.ClientConnInterface) CSDMetricClient {
	return &cSDMetricClient{cc}
}

func (c *cSDMetricClient) ReceiveCSDMetric(ctx context.Context, in *CSDMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/config.CSDMetric/receiveCSDMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSDMetricServer is the server API for CSDMetric service.
// All implementations must embed UnimplementedCSDMetricServer
// for forward compatibility
type CSDMetricServer interface {
	ReceiveCSDMetric(context.Context, *CSDMetricRequest) (*MetricResponse, error)
	mustEmbedUnimplementedCSDMetricServer()
}

// UnimplementedCSDMetricServer must be embedded to have forward compatible implementations.
type UnimplementedCSDMetricServer struct {
}

func (UnimplementedCSDMetricServer) ReceiveCSDMetric(context.Context, *CSDMetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCSDMetric not implemented")
}
func (UnimplementedCSDMetricServer) mustEmbedUnimplementedCSDMetricServer() {}

// UnsafeCSDMetricServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSDMetricServer will
// result in compilation errors.
type UnsafeCSDMetricServer interface {
	mustEmbedUnimplementedCSDMetricServer()
}

func RegisterCSDMetricServer(s grpc.ServiceRegistrar, srv CSDMetricServer) {
	s.RegisterService(&CSDMetric_ServiceDesc, srv)
}

func _CSDMetric_ReceiveCSDMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSDMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSDMetricServer).ReceiveCSDMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CSDMetric/receiveCSDMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSDMetricServer).ReceiveCSDMetric(ctx, req.(*CSDMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSDMetric_ServiceDesc is the grpc.ServiceDesc for CSDMetric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSDMetric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.CSDMetric",
	HandlerType: (*CSDMetricServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "receiveCSDMetric",
			Handler:    _CSDMetric_ReceiveCSDMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/config.proto",
}

// EtcdMetricClient is the client API for EtcdMetric service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdMetricClient interface {
	ReceiveEtcdMetric(ctx context.Context, in *EtcdMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
}

type etcdMetricClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdMetricClient(cc grpc.ClientConnInterface) EtcdMetricClient {
	return &etcdMetricClient{cc}
}

func (c *etcdMetricClient) ReceiveEtcdMetric(ctx context.Context, in *EtcdMetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, "/config.EtcdMetric/receiveEtcdMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdMetricServer is the server API for EtcdMetric service.
// All implementations must embed UnimplementedEtcdMetricServer
// for forward compatibility
type EtcdMetricServer interface {
	ReceiveEtcdMetric(context.Context, *EtcdMetricRequest) (*MetricResponse, error)
	mustEmbedUnimplementedEtcdMetricServer()
}

// UnimplementedEtcdMetricServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdMetricServer struct {
}

func (UnimplementedEtcdMetricServer) ReceiveEtcdMetric(context.Context, *EtcdMetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEtcdMetric not implemented")
}
func (UnimplementedEtcdMetricServer) mustEmbedUnimplementedEtcdMetricServer() {}

// UnsafeEtcdMetricServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdMetricServer will
// result in compilation errors.
type UnsafeEtcdMetricServer interface {
	mustEmbedUnimplementedEtcdMetricServer()
}

func RegisterEtcdMetricServer(s grpc.ServiceRegistrar, srv EtcdMetricServer) {
	s.RegisterService(&EtcdMetric_ServiceDesc, srv)
}

func _EtcdMetric_ReceiveEtcdMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EtcdMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdMetricServer).ReceiveEtcdMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.EtcdMetric/receiveEtcdMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdMetricServer).ReceiveEtcdMetric(ctx, req.(*EtcdMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EtcdMetric_ServiceDesc is the grpc.ServiceDesc for EtcdMetric service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EtcdMetric_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.EtcdMetric",
	HandlerType: (*EtcdMetricServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "receiveEtcdMetric",
			Handler:    _EtcdMetric_ReceiveEtcdMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/config.proto",
}
